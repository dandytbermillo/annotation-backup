-- Migration 029: Add Security Validation Constraints to annotation_types
-- Purpose: Prevent XSS, injection, and malicious data BEFORE Phase 2 write endpoints
-- Created: 2025-10-09
-- CRITICAL: Must be applied before POST /api/annotation-types endpoint goes live

-- 1. Gradient validation: Only allow valid CSS gradients or hex colors
-- Blocks: javascript:alert(1), data:text/html;base64,..., vbscript:, etc.
ALTER TABLE annotation_types
ADD CONSTRAINT annotation_types_gradient_check
CHECK (
  gradient ~ '^linear-gradient\([^)]+\)$' OR
  gradient ~ '^radial-gradient\([^)]+\)$' OR
  gradient ~ '^conic-gradient\([^)]+\)$' OR
  gradient ~ '^#[0-9a-fA-F]{6}$'
);

-- 2. Metadata validation: Define allowed keys (whitelist approach)
-- Allowed keys: tags, description, category, author, version
-- Blocks: __proto__, constructor, and other prototype pollution attempts
--
-- NOTE: PostgreSQL doesn't have a built-in operator to check if all keys are in a whitelist.
-- We use a custom approach: ensure that the set of keys in metadata is a subset of allowed keys.
-- This uses the <@ operator which checks if the left array is contained in the right array.
--
-- Implementation: Extract all keys from the JSONB, cast to text[], check if subset of allowed
ALTER TABLE annotation_types
ADD CONSTRAINT annotation_types_metadata_keys_check
CHECK (
  -- Allow empty metadata
  metadata = '{}'::jsonb OR
  -- Or ensure all keys are in whitelist
  (
    SELECT array_agg(key)
    FROM jsonb_object_keys(metadata) AS key
  ) <@ ARRAY['tags', 'description', 'category', 'author', 'version']::text[]
);

-- 3. Icon validation: Prevent excessively long strings (emojis are 1-4 bytes)
-- This blocks attempts to inject long HTML/JS strings as icons
-- Most emojis are 1-2 characters, emoji sequences (like 👨‍💻) can be up to 4
ALTER TABLE annotation_types
ADD CONSTRAINT annotation_types_icon_length_check
CHECK (char_length(icon) <= 4);

-- 4. Label validation: Prevent control characters and excessive length
-- Already have VARCHAR(100) but add CHECK to prevent control chars
ALTER TABLE annotation_types
ADD CONSTRAINT annotation_types_label_printable_check
CHECK (label ~ '^[a-zA-Z0-9\s\-_()]+$');

-- Verification queries (run these manually to test constraints):
--
-- -- Should FAIL (javascript: URI):
-- INSERT INTO annotation_types (id, label, color, gradient, icon, default_width)
-- VALUES ('evil1', 'Evil', '#FF0000', 'javascript:alert(1)', '💀', 400);
--
-- -- Should FAIL (data: URI):
-- INSERT INTO annotation_types (id, label, color, gradient, icon, default_width)
-- VALUES ('evil2', 'Evil', '#FF0000', 'data:text/html,<script>alert(1)</script>', '💀', 400);
--
-- -- Should FAIL (invalid metadata key):
-- INSERT INTO annotation_types (id, label, color, gradient, icon, default_width, metadata)
-- VALUES ('evil3', 'Evil', '#FF0000', '#FF0000', '💀', 400, '{"__proto__": "bad"}'::jsonb);
--
-- -- Should SUCCEED (valid gradient):
-- INSERT INTO annotation_types (id, label, color, gradient, icon, default_width)
-- VALUES ('test1', 'Test', '#FF0000', 'linear-gradient(135deg, #FF0000 0%, #AA0000 100%)', '🔥', 400);
--
-- -- Should SUCCEED (valid metadata):
-- INSERT INTO annotation_types (id, label, color, gradient, icon, default_width, metadata)
-- VALUES ('test2', 'Test', '#FF0000', '#FF0000', '🔥', 400, '{"tags": ["test"], "description": "A test type"}'::jsonb);
