diff --git a/app/phase3-test/page.tsx b/app/phase3-test/page.tsx
--- a/app/phase3-test/page.tsx
+++ b/app/phase3-test/page.tsx
@@
   const testVersionAPI = async () => {
     addLog('Testing version API endpoints...', 'info');
 
     try {
       // Test GET /api/versions/[noteId]/[panelId]
       const getResponse = await fetch('/api/versions/test-note/test-panel');
       if (getResponse.ok) {
-        const data = await getResponse.json();
-        addLog(`GET /api/versions: ${data.versions ? data.versions.length : 0} versions found`, 'success');
-        if (data.current?.hash) {
-          addLog(`Current version hash: ${data.current.hash.substring(0, 8)}...`, 'info');
-        }
+        const data = await getResponse.json();
+        let versions = Array.isArray(data.versions) ? data.versions : [];
+        let count = versions.length;
+        addLog(`GET /api/versions: ${count} versions found`, 'success');
+        if (data.current?.hash) {
+          addLog(`Current version hash: ${data.current.hash.substring(0, 8)}...`, 'info');
+        }
+        // If fewer than 2 versions, seed and re-fetch to determine actual version numbers
+        if (count < 2) {
+          // Ensure test docs are available
+          if (!baseDoc || !testDoc1) {
+            addLog('Docs not initialized; initializing now', 'info');
+            initializeTestDocuments();
+          }
+          const seed1 = await fetch('/api/versions/test-note/test-panel', {
+            method: 'POST',
+            headers: { 'Content-Type': 'application/json' },
+            body: JSON.stringify({ action: 'save', content: baseDoc })
+          });
+          if (!seed1.ok) addLog('Seeding v1 failed', 'warning');
+          const seed2 = await fetch('/api/versions/test-note/test-panel', {
+            method: 'POST',
+            headers: { 'Content-Type': 'application/json' },
+            body: JSON.stringify({ action: 'save', content: testDoc1 })
+          });
+          if (!seed2.ok) addLog('Seeding v2 failed', 'warning');
+          addLog('Seeded versions for compare test', 'success');
+          const refetch = await fetch('/api/versions/test-note/test-panel');
+          if (refetch.ok) {
+            const refData = await refetch.json();
+            versions = Array.isArray(refData.versions) ? refData.versions : [];
+            count = versions.length;
+          }
+        }
+        // Pick two most recent version numbers (API returns DESC)
+        const v2 = versions?.[0]?.version ?? 2;
+        const v1 = versions?.[1]?.version ?? 1;
       } else {
         addLog(`GET /api/versions failed: ${getResponse.status}`, 'warning');
       }
 
       // Test POST /api/versions/compare
       const compareResponse = await fetch('/api/versions/compare', {
         method: 'POST',
         headers: { 'Content-Type': 'application/json' },
         body: JSON.stringify({
           noteId: 'test-note',
           panelId: 'test-panel',
-          version1: 0,
-          version2: 1
+          version1: v1 ?? 1,
+          version2: v2 ?? 2
         })
       });
