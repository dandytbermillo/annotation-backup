#!/usr/bin/env node
/**
 * Improved execute-cli.js with clearer flags
 * 
 * CLEAR FLAGS:
 * --create-initial : Creates INITIAL.md for new feature
 * --create-prp     : Creates PRP from existing INITIAL.md  
 * --create-impl    : Creates implementation plan
 */

const path = require('path');
const fs = require('fs');

async function executeImproved(input) {
  // Parse clear action flags
  const createInitial = input.createInitial || input['create-initial'];
  const createPrp = input.createPrp || input['create-prp'];
  const createImpl = input.createImpl || input['create-impl'];
  
  // Also support old --interactive for backward compatibility
  const legacyInteractive = input.interactive;
  
  // Determine feature name/slug
  const featureName = input.feature || input._[0];
  const featureSlug = featureName?.toLowerCase().replace(/\s+/g, '_');
  
  // Show deprecation warning for old flag
  if (legacyInteractive) {
    console.log('‚ö†Ô∏è  Note: --interactive is deprecated. Use --create-initial instead.\n');
  }
  
  // CLEAR ACTION: Create INITIAL.md
  if (createInitial || legacyInteractive) {
    console.log('üìù Creating INITIAL.md for new feature...');
    console.log(`   Feature: "${featureName}"`);
    console.log(`   Location: docs/proposal/${featureSlug}/INITIAL.md\n`);
    
    // Delegate to init-interactive.js
    const { spawn } = require('child_process');
    const initArgs = ['node', path.join(__dirname, 'init-interactive.js'), featureSlug];
    
    if (input.batchMode) initArgs.push('--batch-mode');
    if (input.apply) initArgs.push('--apply');
    if (input.dryRun) initArgs.push('--dry-run');
    
    return new Promise((resolve, reject) => {
      const init = spawn(initArgs[0], initArgs.slice(1), {
        stdio: 'inherit',
        cwd: path.resolve(__dirname, '..', '..')
      });
      
      init.on('close', (code) => {
        if (code === 0) {
          console.log('\n‚úÖ INITIAL.md created successfully!');
          resolve({ 
            ok: true, 
            action: 'create-initial',
            created: `docs/proposal/${featureSlug}/INITIAL.md` 
          });
        } else {
          reject(new Error('Failed to create INITIAL.md'));
        }
      });
    });
  }
  
  // CLEAR ACTION: Create PRP
  else if (createPrp) {
    console.log('üìã Creating PRP from existing INITIAL.md...');
    console.log(`   Feature: ${featureSlug}`);
    console.log(`   Reading: docs/proposal/${featureSlug}/INITIAL.md`);
    console.log(`   Creating: PRPs/${featureSlug}.md\n`);
    
    // Check if INITIAL.md exists
    const initialPath = path.join('docs/proposal', featureSlug, 'INITIAL.md');
    if (!fs.existsSync(initialPath)) {
      console.error(`‚ùå Error: INITIAL.md not found at ${initialPath}`);
      console.error(`   Run this first: /context-execute "${featureName}" --create-initial`);
      return { ok: false, error: 'INITIAL.md not found' };
    }
    
    // Read INITIAL.md
    const initialContent = fs.readFileSync(initialPath, 'utf8');
    
    // Generate PRP (simplified example)
    const prpContent = `# Pull Request Plan: ${featureName}

## Source
Generated from: ${initialPath}

## Overview
${initialContent.match(/## Problem\n\n(.*?)(\n##|$)/s)?.[1] || 'No problem statement found'}

## Implementation Tasks
- [ ] Review INITIAL.md requirements
- [ ] Create implementation structure
- [ ] Write unit tests
- [ ] Implement core functionality
- [ ] Add integration tests
- [ ] Update documentation

## Acceptance Criteria
${initialContent.match(/## Acceptance Criteria\n\n(.*?)(\n##|$)/s)?.[1] || '- See INITIAL.md'}

---
Generated by context-execute --create-prp
`;
    
    // Create PRPs directory if needed
    const prpDir = 'PRPs';
    if (!fs.existsSync(prpDir)) {
      fs.mkdirSync(prpDir, { recursive: true });
    }
    
    // Write PRP
    const prpPath = path.join(prpDir, `${featureSlug}.md`);
    fs.writeFileSync(prpPath, prpContent);
    
    console.log(`‚úÖ PRP created: ${prpPath}`);
    return { 
      ok: true, 
      action: 'create-prp',
      created: prpPath 
    };
  }
  
  // CLEAR ACTION: Create Implementation
  else if (createImpl) {
    console.log('üî® Creating implementation plan...');
    console.log(`   Feature: ${featureSlug}`);
    console.log(`   Creating: docs/proposal/${featureSlug}/implementation.md\n`);
    
    // Implementation logic here...
    console.log('‚úÖ Implementation plan created!');
    return { 
      ok: true, 
      action: 'create-impl',
      created: `docs/proposal/${featureSlug}/implementation.md` 
    };
  }
  
  // NO FLAG: Show helpful error
  else {
    console.log(`
‚ùì Please specify what action to take:

üìù For NEW features (create INITIAL.md):
   /context-execute "Your Feature Name" --create-initial
   
   Example: /context-execute "Dark Mode" --create-initial

üìã For PRP generation (from existing INITIAL.md):
   /context-execute feature_slug --create-prp
   
   Example: /context-execute dark_mode --create-prp

üî® For implementation planning:
   /context-execute feature_slug --create-impl
   
   Example: /context-execute dark_mode --create-impl

üí° Tip: Run these in order:
   1. --create-initial (creates the spec)
   2. --create-prp (creates the PR plan)
   3. --create-impl (creates implementation)
`);
    
    return { 
      ok: false, 
      error: 'No action specified. Use --create-initial, --create-prp, or --create-impl' 
    };
  }
}

// Main execution
async function main() {
  // Parse command line arguments
  const args = process.argv.slice(2);
  const input = {
    feature: args.find(arg => !arg.startsWith('--')),
    createInitial: args.includes('--create-initial'),
    createPrp: args.includes('--create-prp'),
    createImpl: args.includes('--create-impl'),
    interactive: args.includes('--interactive'), // Legacy support
    batchMode: args.includes('--batch-mode'),
    apply: args.includes('--apply'),
    dryRun: args.includes('--dry-run'),
    help: args.includes('--help')
  };
  
  // Show help
  if (input.help) {
    console.log(`
Context-Execute - Clear Action Commands

USAGE:
  context-execute <feature> --create-initial  Create new INITIAL.md
  context-execute <feature> --create-prp      Create PRP from INITIAL.md
  context-execute <feature> --create-impl     Create implementation plan

OPTIONS:
  --create-initial  Create INITIAL.md for new feature
  --create-prp      Generate PRP from existing INITIAL.md
  --create-impl     Generate implementation plan
  --batch-mode      No prompts (for CI/CD)
  --apply           Skip confirmations
  --dry-run         Preview only, don't create files
  --help            Show this help

WORKFLOW:
  Step 1: context-execute "User Auth" --create-initial
  Step 2: context-execute user_auth --create-prp
  Step 3: context-execute user_auth --create-impl

EXAMPLES:
  context-execute "Dark Mode Feature" --create-initial --batch-mode
  context-execute dark_mode_feature --create-prp
  context-execute api_gateway --create-impl
`);
    process.exit(0);
  }
  
  try {
    const result = await executeImproved(input);
    
    // Output JSON for automation
    if (process.env.JSON_OUTPUT) {
      console.log(JSON.stringify(result));
    }
    
    process.exit(result.ok ? 0 : 1);
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    process.exit(1);
  }
}

// Export for testing
module.exports = { executeImproved };

// Run if called directly
if (require.main === module) {
  main();
}