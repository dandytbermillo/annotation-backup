COMPLETE MULTI-LAYER CANVAS ISOLATION FIX
=========================================
This patch fully fixes the layer isolation issue by:
1. Establishing a single LayerProvider at app level
2. Adding canvas pointer-events gating when popups are active
3. Implementing proper z-index management with reset capability
4. Preserving proper drag behavior

---

PART 1: UNIFIED LAYER PROVIDER SETUP
=====================================

1A) Add LayerProvider import and wrap entire app
--------------------------------------------------
*** Begin Patch
*** Update File: components/annotation-app.tsx
@@
-import { useLayer } from "@/components/canvas/layer-provider"
+import { useLayer, LayerProvider } from "@/components/canvas/layer-provider"
@@

// At the end of the file, modify the AnnotationApp export:
@@
 export function AnnotationApp() {
-  const multiLayerEnabled = useFeatureFlag('ui.multiLayerCanvas' as any)
-  
-  // Wrap with LayerProvider if multi-layer is enabled
-  if (multiLayerEnabled) {
-    return (
-      <LayerProvider initialPopupCount={0}>
-        <AnnotationAppContent />
-      </LayerProvider>
-    )
-  }
-  
-  // Without multi-layer, render directly
-  return <AnnotationAppContent />
+  // Always provide LayerProvider - it will internally check feature flag
+  return (
+    <LayerProvider initialPopupCount={0}>
+      <AnnotationAppContent />
+    </LayerProvider>
+  )
 }
*** End Patch

1B) Add canvas interaction gating based on active layer
--------------------------------------------------------
*** Begin Patch
*** Update File: components/annotation-app.tsx
@@
       {/* Canvas Area - Full width when explorer is closed */}
       <div 
         className={`flex-1 relative transition-all duration-300 ease-in-out ${
           isNotesExplorerOpen ? 'lg:ml-80' : 'ml-0'
         }`}
-        style={{
-          // Disable pointer events when popup layer is active
-          pointerEvents: multiLayerEnabled && layerContext?.activeLayer === 'popups' ? 'none' : 'auto',
-          // Dim the canvas when popup layer is active
-          opacity: multiLayerEnabled && layerContext?.activeLayer === 'popups' ? 0.6 : 1,
-          transition: 'opacity 0.3s ease'
-        }}
+        style={{
+          // Disable pointer events when popup layer is active
+          pointerEvents: multiLayerEnabled && layerContext?.activeLayer === 'popups' ? 'none' : 'auto',
+          // Dim the canvas when popup layer is active
+          opacity: multiLayerEnabled && layerContext?.activeLayer === 'popups' ? 0.6 : 1,
+          // Add transition for smooth visual feedback
+          transition: 'opacity 0.3s ease',
+          // Ensure canvas stays below popups even with z-index escalation
+          position: 'relative',
+          zIndex: 1
+        }}
       >
*** End Patch

---

PART 2: REMOVE NESTED LAYER PROVIDER
=====================================

2A) Remove LayerProvider import from NotesExplorer
---------------------------------------------------
*** Begin Patch
*** Update File: components/notes-explorer-phase1.tsx
@@
 import { Clock, FolderOpen, Folder, Database, WifiOff, Eye } from "lucide-react"
-import { LayerProvider } from "@/components/canvas/layer-provider"
 import { PopupOverlay } from "@/components/canvas/popup-overlay"
 import { useLayer } from "@/components/canvas/layer-provider"
*** End Patch

2B) Simplify NotesExplorerPhase1 to not create provider
--------------------------------------------------------
*** Begin Patch
*** Update File: components/notes-explorer-phase1.tsx
@@
 export function NotesExplorerPhase1(props: NotesExplorerProps) {
   const multiLayerEnabled = useFeatureFlag('ui.multiLayerCanvas' as any)
   
-  // LayerProvider is now provided at the app level (annotation-app.tsx)
-  // so we don't create a duplicate provider here
+  // LayerProvider is provided at the app level (annotation-app.tsx)
   return <NotesExplorerContent {...props} multiLayerEnabled={multiLayerEnabled} />
 }
*** End Patch

2C) Fix click-outside blocker to preserve drag behavior
--------------------------------------------------------
*** Begin Patch
*** Update File: components/notes-explorer-phase1.tsx
@@
       {/* Click outside to close all popovers */}
-      {hoverPopovers.size > 0 && !draggingPopup && (
+      {hoverPopovers.size > 0 && (
         <div
           className="fixed inset-0"
           style={{ zIndex: 9997 }}
-          onClick={closeAllPopovers}
+          onClick={(e) => {
+            // Only close if not currently dragging
+            if (!draggingPopup) {
+              closeAllPopovers()
+            }
+          }}
+          onMouseDown={(e) => {
+            // Prevent closing while starting a drag
+            if (draggingPopup) {
+              e.preventDefault()
+            }
+          }}
         />
       )}
*** End Patch

---

PART 3: PROPER Z-INDEX MANAGEMENT
==================================

3A) Add controlled z-index management system
---------------------------------------------
*** Begin Patch
*** Update File: components/canvas/canvas-panel.tsx
@@
 import type { PlainOfflineProvider } from "@/lib/providers/plain-offline-provider"
 
 const TiptapEditorCollab = dynamic(() => import('./tiptap-editor-collab'), { ssr: false })
 
+// Z-index management for panels
+// Keep below popup overlay (100+) but allow stacking
+const PANEL_Z_INDEX = {
+  base: 10,      // Default z-index for panels
+  active: 50,    // Z-index for the currently active/dragged panel
+  max: 90        // Maximum z-index to stay below popups
+}
+
+// Track which panel is currently active/topmost
+let activePanelId: string | null = null
+
+// Simple counter for breaking ties when multiple panels are at same level
+let panelOrder = 0
*** End Patch

3B) Replace Date.now() with controlled z-index
-----------------------------------------------
*** Begin Patch
*** Update File: components/canvas/canvas-panel.tsx
@@
       // Bring panel to front
-      setZIndex(Date.now())
+      // Bring panel to front with controlled z-index
+      setZIndex(() => {
+        activePanelId = panelId
+        panelOrder = (panelOrder + 1) % 1000 // Reset periodically to avoid overflow
+        // Active panel gets higher z-index, with small offset for order
+        return PANEL_Z_INDEX.active + (panelOrder * 0.001)
+      })
*** End Patch

3C) Reset z-index when drag ends
---------------------------------
*** Begin Patch
*** Update File: components/canvas/canvas-panel.tsx
@@
     const handleMouseUp = (e: MouseEvent) => {
       if (!isDragging) return
       
       setIsDragging(false)
+      
+      // Reset z-index to base level after drag
+      setTimeout(() => {
+        if (activePanelId === panelId) {
+          setZIndex(PANEL_Z_INDEX.base + (panelOrder * 0.001))
+          activePanelId = null
+        }
+      }, 100)
       
       // Remove global event listeners
       document.removeEventListener('mousemove', handleMouseMove)
*** End Patch

---

PART 4: ENSURE POPUP OVERLAY Z-INDEX SUPREMACY
===============================================

4A) Update popup overlay z-index to guarantee it's above panels
----------------------------------------------------------------
*** Begin Patch
*** Update File: components/canvas/popup-overlay.tsx
@@
       className="fixed inset-0 pointer-events-none"
       style={{
-        zIndex: Z_INDEX.POPUP_OVERLAY,
+        // Ensure popup overlay is always above canvas panels
+        zIndex: Math.max(Z_INDEX.POPUP_OVERLAY, 100),
         ...containerStyle,
       }}
*** End Patch

---

PART 5: LAYER PROVIDER FEATURE FLAG CHECK
==========================================

5A) Make LayerProvider respect feature flag internally
-------------------------------------------------------
*** Begin Patch
*** Update File: components/canvas/layer-provider.tsx
@@
 export const LayerProvider: React.FC<LayerProviderProps> = ({ 
   children,
   initialPopupCount = 0 
 }) => {
-  const multiLayerEnabled = useFeatureFlag('ui.multiLayerCanvas' as any);
+  const multiLayerEnabled = useFeatureFlag('ui.multiLayerCanvas' as any);
+  
+  // If feature is disabled, provide minimal stub context
+  if (!multiLayerEnabled) {
+    return (
+      <LayerContext.Provider value={{
+        activeLayer: 'notes',
+        layers: new Map(),
+        transforms: {},
+        syncPan: false,
+        syncZoom: false,
+        setActiveLayer: () => {},
+        updateTransform: () => {},
+        updateLayerOpacity: () => {},
+        updateLayerVisibility: () => {},
+        toggleSyncPan: () => {},
+        toggleSyncZoom: () => {},
+        resetView: () => {},
+        toggleSidebar: () => {},
+        isSidebarVisible: true,
+      }}>
+        {children}
+      </LayerContext.Provider>
+    );
+  }
*** End Patch

---

POST-APPLY VERIFICATION CHECKLIST
==================================
✓ Single LayerProvider at app level wraps both NotesExplorer and canvas
✓ Canvas container has pointer-events: none when activeLayer === 'popups'
✓ Canvas dims to 60% opacity when popup layer is active
✓ Panel z-index stays between 10-90, never exceeds popup overlay
✓ Active panel gets z-index 50, returns to 10 after drag
✓ Click-outside blocker doesn't trigger while dragging popups
✓ Layer indicator correctly shows "Notes" or "Popups" based on state
✓ Notes canvas is non-interactive when popups are open
✓ Popups remain above panels even after panel dragging

---

TESTING STEPS
=============
1. Enable multi-layer canvas: localStorage.setItem('feature:ui.multiLayerCanvas', 'true')
2. Refresh and select a note to see canvas
3. Hover over folder eye icon to open popup
4. Verify:
   - Layer indicator switches to "Popups" (purple)
   - Canvas dims to 60% opacity
   - Cannot drag or interact with notes/panels
   - Can interact with popups
5. Close all popups
6. Verify:
   - Layer indicator returns to "Notes" (blue)
   - Canvas returns to full opacity
   - Can drag and interact with notes/panels
7. Test z-index:
   - Drag a panel, then open a popup
   - Popup should appear above the panel
   - Panel z-index should be ≤ 90 in DevTools