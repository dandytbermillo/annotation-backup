"use client"

import { useEffect, useLayoutEffect, useRef, useState } from "react"
import { Eye } from "lucide-react"
import { useLayer } from "@/components/canvas/layer-provider"
import { CoordinateBridge } from "@/lib/utils/coordinate-bridge"
import { getPlainProvider } from "@/lib/provider-switcher"
import { UnifiedProvider } from "@/lib/provider-switcher"
import { BranchesSection } from "@/components/canvas/branches-section"
import { createNote } from "@/lib/utils/note-creator"

type PanelKey = "recents" | "org" | "tools" | "layer" | "format" | "resize" | "branches" | "actions" | null

type FloatingToolbarProps = {
  x: number
  y: number
  onClose: () => void
  onSelectNote?: (noteId: string) => void
  onCreateNote?: () => void
  onCreateOverlayPopup?: (popup: OverlayPopup) => void
  editorRef?: React.RefObject<any> // Optional editor ref for format commands
  activePanelId?: string | null // Currently active panel ID for branches/actions
}

interface RecentNote {
  id: string
  title: string
  metaLeft: string
  metaRight: string
}

export interface OrgItem {
  id: string
  name: string
  type: "folder" | "note"
  icon?: string
  color?: string
  hasChildren?: boolean
  level: number
  children?: OrgItem[]
  parentId?: string
}

interface FolderPopup {
  id: string
  folderId: string
  folderName: string
  position: { x: number; y: number }
  children: OrgItem[]
  isLoading: boolean
}

export interface OverlayPopup {
  id: string
  folderId: string
  folderName: string
  folder: OrgItem | null
  position: { x: number; y: number }
  canvasPosition: { x: number; y: number }
  children: OrgItem[]
  isLoading: boolean
  isPersistent: boolean
  level: number
  parentPopupId?: string
}

const TOOL_CATEGORIES = [
  { id: "layer" as const, label: "Layer" },
  { id: "format" as const, label: "Format" },
  { id: "resize" as const, label: "Resize" },
  { id: "branches" as const, label: "Branches" },
  { id: "actions" as const, label: "Actions" },
]

const LAYER_ACTIONS = [
  { label: "Bring to Front", desc: "Move panel to top" },
  { label: "Send to Back", desc: "Move panel to bottom" },
]

interface FormatAction {
  label: string
  tooltip: string
  className?: string
  command?: string
  value?: any
}

const FORMAT_ACTIONS: FormatAction[] = [
  { label: "B", tooltip: "Bold", className: "font-bold", command: "bold" },
  { label: "I", tooltip: "Italic", className: "italic", command: "italic" },
  { label: "U", tooltip: "Underline", className: "underline", command: "underline" },
  { label: "H2", tooltip: "Heading 2", command: "heading", value: 2 },
  { label: "H3", tooltip: "Heading 3", command: "heading", value: 3 },
  { label: "‚Ä¢", tooltip: "Bullet List", command: "bulletList" },
  { label: "1.", tooltip: "Numbered List", command: "orderedList" },
  { label: '"', tooltip: "Quote", command: "blockquote" },
  { label: "üñç", tooltip: "Highlight", command: "highlight" },
  { label: "‚ñ¶", tooltip: "Block Based", command: "collapsibleBlock" },
  { label: "‚úï", tooltip: "Clear Format", command: "removeFormat" },
]

const RESIZE_ACTIONS = [
  { label: "Resize / Restore", desc: "Toggle panel height" },
]

const BRANCH_ACTIONS = [
  { label: "üìÑ Main Document", desc: "Root branch" },
  { label: "üìù Introduction", desc: "Note branch" },
  { label: "üîç Research Area", desc: "Explore branch" },
  { label: "‚≠ê Final Version", desc: "Promote branch" },
]

const ACTION_ITEMS = [
  { label: "üìù Note", desc: "Create note branch", type: "note" as const },
  { label: "üîç Explore", desc: "Create explore branch", type: "explore" as const },
  { label: "‚≠ê Promote", desc: "Create promote branch", type: "promote" as const },
]

export function FloatingToolbar({ x, y, onClose, onSelectNote, onCreateNote, onCreateOverlayPopup, editorRef, activePanelId }: FloatingToolbarProps) {
  const containerRef = useRef<HTMLDivElement | null>(null)
  const [position, setPosition] = useState({ left: x, top: y })
  const [activePanel, setActivePanel] = useState<PanelKey>(null)
  const panelHoverTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  const [isHoveringPanel, setIsHoveringPanel] = useState(false)
  const [isCreatingNote, setIsCreatingNote] = useState(false)

  // Debug: Log when activePanelId prop changes
  useEffect(() => {
    console.log('[FloatingToolbar] activePanelId prop changed to:', activePanelId)
  }, [activePanelId])

  // Auto-open Format panel if triggered by text selection
  useEffect(() => {
    const shouldAutoOpen = (window as any).__autoOpenFormatPanel
    if (shouldAutoOpen) {
      setActivePanel('format')
      ;(window as any).__autoOpenFormatPanel = false // Clear flag
    }
  }, [])
  const [recentNotes, setRecentNotes] = useState<RecentNote[]>([])
  const [isLoadingRecent, setIsLoadingRecent] = useState(false)
  const [orgItems, setOrgItems] = useState<OrgItem[]>([])
  const [isLoadingOrg, setIsLoadingOrg] = useState(false)
  const [expandedFolders, setExpandedFolders] = useState<Record<string, boolean>>({})
  const [folderPopups, setFolderPopups] = useState<FolderPopup[]>([]) // Hover tooltips
  const popupIdCounter = useRef(0)
  const hoverTimeoutRef = useRef<Map<string, NodeJS.Timeout>>(new Map())

  // Note preview state
  const [notePreview, setNotePreview] = useState<{
    noteId: string
    content: string
    position: { x: number; y: number }
  } | null>(null)
  const [isLoadingPreview, setIsLoadingPreview] = useState(false)
  const previewTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  const previewCloseTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  const isHoveringPreviewRef = useRef(false)

  // Layer context for overlay canvas
  const layerContext = useLayer()
  const multiLayerEnabled = true
  const identityTransform = { x: 0, y: 0, scale: 1 }
  const sharedOverlayTransform = layerContext?.transforms.popups || identityTransform

  // Execute editor command
  const executeCommand = (command: string, value?: any) => {
    if (!editorRef?.current) {
      console.warn('[FloatingToolbar] No active editor ref - cannot execute command:', command)
      return
    }
    editorRef.current.executeCommand(command, value)
  }

  // Insert annotation (note, explore, promote)
  // This triggers the existing AnnotationToolbar's createAnnotation logic
  const insertAnnotation = (type: 'note' | 'explore' | 'promote') => {
    console.log('[FloatingToolbar] Triggering annotation creation:', type)

    // Dispatch the annotation creation event that the AnnotationToolbar listens for
    // The AnnotationToolbar component has buttons that call createAnnotation(type)
    // We can trigger the same by clicking the corresponding button programmatically
    const toolbar = document.getElementById('annotation-toolbar')
    if (!toolbar) {
      console.warn('[FloatingToolbar] annotation-toolbar not found in DOM')
      return
    }

    // Find and click the appropriate button
    const buttonSelector = `.annotation-btn.${type}`
    const button = toolbar.querySelector(buttonSelector) as HTMLButtonElement

    if (button) {
      console.log('[FloatingToolbar] Clicking annotation button:', type)
      button.click()
    } else {
      console.warn('[FloatingToolbar] Annotation button not found:', buttonSelector)
    }
  }

  useLayoutEffect(() => {
    const el = containerRef.current
    if (!el) {
      setPosition({ left: x, top: y })
      return
    }

    el.style.left = `${x}px`
    el.style.top = `${y}px`

    requestAnimationFrame(() => {
      const rect = el.getBoundingClientRect()
      let left = x + 12
      let top = y + 12

      if (left + rect.width > window.innerWidth - 16) left = window.innerWidth - rect.width - 16
      if (top + rect.height > window.innerHeight - 16) top = window.innerHeight - rect.height - 16
      if (left < 16) left = 16
      if (top < 16) top = 16

      setPosition({ left, top })
    })
  }, [x, y])

  // Fetch recent notes from API
  useEffect(() => {
    const fetchRecentNotes = async () => {
      setIsLoadingRecent(true)
      try {
        const response = await fetch('/api/items/recent?limit=5')
        if (!response.ok) throw new Error('Failed to fetch recent notes')

        const data = await response.json()
        const items = data.items || []

        // Transform API data to match our UI format
        const formattedNotes: RecentNote[] = items.map((item: any) => {
          const lastAccessed = new Date(item.lastAccessedAt || '')
          const timeAgo = Date.now() - lastAccessed.getTime()
          const hours = Math.floor(timeAgo / (1000 * 60 * 60))
          const days = Math.floor(hours / 24)

          let timeText = ''
          if (days > 0) {
            timeText = `${days}d ago`
          } else if (hours > 0) {
            timeText = `${hours}h ago`
          } else {
            timeText = 'Just now'
          }

          return {
            id: item.id,
            title: item.name,
            metaLeft: timeText,
            metaRight: item.type === 'folder' ? 'üìÅ Folder' : 'üìÑ Note'
          }
        })

        setRecentNotes(formattedNotes)
      } catch (error) {
        console.error('Error fetching recent notes:', error)
        setRecentNotes([])
      } finally {
        setIsLoadingRecent(false)
      }
    }

    fetchRecentNotes()
  }, [])

  // Fetch organization tree from API
  useEffect(() => {
    const fetchOrgTree = async () => {
      setIsLoadingOrg(true)
      try {
        const response = await fetch('/api/items?parentId=null')
        if (!response.ok) throw new Error('Failed to fetch organization tree')

        const data = await response.json()
        const items = data.items || []

        // Transform API data to tree structure with icons
        const formattedItems: OrgItem[] = items.map((item: any) => ({
          id: item.id,
          name: item.name,
          type: item.type,
          icon: item.icon || (item.type === 'folder' ? 'üìÅ' : 'üìÑ'),
          color: item.color,
          hasChildren: item.type === 'folder',
          level: 0,
          children: [],
          parentId: item.parentId
        }))

        setOrgItems(formattedItems)

        // Auto-expand "Knowledge Base" folder
        const knowledgeBase = formattedItems.find(item =>
          item.name.toLowerCase() === 'knowledge base' && item.type === 'folder'
        )
        if (knowledgeBase) {
          setExpandedFolders({ [knowledgeBase.id]: true })

          // Fetch children for Knowledge Base
          try {
            const childResponse = await fetch(`/api/items?parentId=${knowledgeBase.id}`)
            if (childResponse.ok) {
              const childData = await childResponse.json()
              const children = childData.items || []

              const formattedChildren: OrgItem[] = children.map((item: any) => ({
                id: item.id,
                name: item.name,
                type: item.type,
                icon: item.icon || (item.type === 'folder' ? 'üìÅ' : 'üìÑ'),
                color: item.color,
                hasChildren: item.type === 'folder',
                level: 1,
                children: [],
                parentId: item.parentId
              }))

              setOrgItems(prevItems =>
                prevItems.map(item =>
                  item.id === knowledgeBase.id
                    ? { ...item, children: formattedChildren }
                    : item
                )
              )
            }
          } catch (error) {
            console.error('Error fetching Knowledge Base children:', error)
          }
        }
      } catch (error) {
        console.error('Error fetching organization tree:', error)
        setOrgItems([])
      } finally {
        setIsLoadingOrg(false)
      }
    }

    fetchOrgTree()
  }, [])

  // Toggle folder expansion and load children if needed
  const toggleFolder = async (folderId: string) => {
    const isExpanding = !expandedFolders[folderId]

    // If expanding and children not loaded yet, fetch them
    if (isExpanding) {
      const folder = findItemById(folderId, orgItems)
      if (folder && folder.type === 'folder' && (!folder.children || folder.children.length === 0)) {
        try {
          const response = await fetch(`/api/items?parentId=${folderId}`)
          if (!response.ok) throw new Error('Failed to fetch folder children')

          const data = await response.json()
          const children = data.items || []

          // Transform children
          const formattedChildren: OrgItem[] = children.map((item: any) => ({
            id: item.id,
            name: item.name,
            type: item.type,
            icon: item.icon || (item.type === 'folder' ? 'üìÅ' : 'üìÑ'),
            color: item.color,
            hasChildren: item.type === 'folder',
            level: folder.level + 1,
            children: [],
            parentId: item.parentId
          }))

          // Update the tree with children
          const updateTree = (items: OrgItem[]): OrgItem[] => {
            return items.map(item => {
              if (item.id === folderId) {
                return { ...item, children: formattedChildren }
              }
              if (item.children && item.children.length > 0) {
                return { ...item, children: updateTree(item.children) }
              }
              return item
            })
          }

          setOrgItems(updateTree(orgItems))
        } catch (error) {
          console.error('Error fetching folder children:', error)
        }
      }
    }

    // Toggle expansion state
    setExpandedFolders(prev => ({
      ...prev,
      [folderId]: isExpanding
    }))
  }

  // Helper to find item by id in tree
  const findItemById = (id: string, items: OrgItem[]): OrgItem | null => {
    for (const item of items) {
      if (item.id === id) return item
      if (item.children) {
        const found = findItemById(id, item.children)
        if (found) return found
      }
    }
    return null
  }

  // Flatten tree for rendering
  const flattenTree = (items: OrgItem[]): OrgItem[] => {
    const result: OrgItem[] = []
    const traverse = (nodes: OrgItem[]) => {
      for (const node of nodes) {
        result.push(node)
        if (expandedFolders[node.id] && node.children && node.children.length > 0) {
          traverse(node.children)
        }
      }
    }
    traverse(items)
    return result
  }

  // Handle folder eye icon hover to show popup
  const handleEyeHover = async (folder: OrgItem, event: React.MouseEvent) => {
    event.stopPropagation()
    console.log('[handleEyeHover] Called for folder:', folder.name, folder.id)

    // Check if popup already exists for this folder
    const existingPopup = folderPopups.find(p => p.folderId === folder.id)
    if (existingPopup) {
      // Already showing, don't create another
      return
    }

    // Get button position
    const rect = event.currentTarget.getBoundingClientRect()

    // Calculate popup position - prefer right side
    const spaceRight = window.innerWidth - rect.right
    let popupPosition = { x: 0, y: 0 }

    if (spaceRight > 320) {
      // Place to the right
      popupPosition.x = rect.right + 10
      popupPosition.y = rect.top
    } else {
      // Place below if not enough space on right
      popupPosition.x = rect.left
      popupPosition.y = rect.bottom + 10
    }

    // Create new popup
    const popupId = `folder-popup-${++popupIdCounter.current}`
    const newPopup: FolderPopup = {
      id: popupId,
      folderId: folder.id,
      folderName: folder.name,
      position: popupPosition,
      children: [],
      isLoading: true
    }

    setFolderPopups(prev => [...prev, newPopup])
    console.log('[handleEyeClick] Created popup:', popupId, 'at position:', popupPosition)

    // Fetch folder children
    try {
      const response = await fetch(`/api/items?parentId=${folder.id}`)
      if (!response.ok) throw new Error('Failed to fetch folder contents')

      const data = await response.json()
      const children = data.items || []

      const formattedChildren: OrgItem[] = children.map((item: any) => ({
        id: item.id,
        name: item.name,
        type: item.type,
        icon: item.icon || (item.type === 'folder' ? 'üìÅ' : 'üìÑ'),
        color: item.color,
        hasChildren: item.type === 'folder',
        level: folder.level + 1,
        children: [],
        parentId: item.parentId
      }))

      // Update popup with children
      setFolderPopups(prev =>
        prev.map(p =>
          p.id === popupId
            ? { ...p, children: formattedChildren, isLoading: false }
            : p
        )
      )
    } catch (error) {
      console.error('Error fetching folder contents:', error)
      // Remove popup on error
      setFolderPopups(prev => prev.filter(p => p.id !== popupId))
    }
  }

  // Handle hover leave to close popup
  const handleEyeHoverLeave = (folderId: string) => {
    // Close popup for this folder after a short delay
    const timeout = setTimeout(() => {
      setFolderPopups(prev => prev.filter(p => p.folderId !== folderId))
    }, 300) // 300ms delay before closing

    hoverTimeoutRef.current.set(folderId, timeout)

    // Also close the panel if not hovering it
    if (!isHoveringPanel) {
      panelHoverTimeoutRef.current = setTimeout(() => {
        setActivePanel(null)
      }, 200)
    }
  }

  // Cancel close timeout when hovering over popup
  const handlePopupHover = (folderId: string) => {
    const timeout = hoverTimeoutRef.current.get(folderId)
    if (timeout) {
      clearTimeout(timeout)
      hoverTimeoutRef.current.delete(folderId)
    }
    // Also cancel panel close timeout to keep Organization panel open
    if (panelHoverTimeoutRef.current) {
      clearTimeout(panelHoverTimeoutRef.current)
      panelHoverTimeoutRef.current = null
    }
  }

  // Handle eye icon click to activate overlay canvas
  const handleEyeClick = async (folder: OrgItem, event: React.MouseEvent) => {
    event.stopPropagation()

    // Close hover tooltips
    setFolderPopups([])

    // If no callback provided, do nothing
    if (!onCreateOverlayPopup) return

    const rect = event.currentTarget.getBoundingClientRect()
    const spaceRight = window.innerWidth - rect.right
    let popupPosition = { x: rect.right + 10, y: rect.top }

    if (spaceRight < 320) {
      popupPosition = { x: rect.left, y: rect.bottom + 10 }
    }

    const popupId = `overlay-popup-${++popupIdCounter.current}`
    const canvasPosition = CoordinateBridge.screenToCanvas(popupPosition, sharedOverlayTransform)
    const screenPosition = CoordinateBridge.canvasToScreen(canvasPosition, sharedOverlayTransform)

    // Create initial popup with loading state
    const newPopup: OverlayPopup = {
      id: popupId,
      folderId: folder.id,
      folderName: folder.name,
      folder: null,
      position: screenPosition,
      canvasPosition: canvasPosition,
      children: [],
      isLoading: true,
      isPersistent: true,
      level: 0
    }

    // Call callback to create popup in parent (annotation-app)
    onCreateOverlayPopup(newPopup)

    // Close toolbar after creating popup (same pattern as selecting a note)
    onClose()

    // Fetch children in background and update via callback
    try {
      const response = await fetch(`/api/items?parentId=${folder.id}`)
      if (!response.ok) throw new Error('Failed to fetch folder contents')

      const data = await response.json()
      const children = data.items || []

      const formattedChildren: OrgItem[] = children.map((item: any) => ({
        id: item.id,
        name: item.name,
        type: item.type,
        icon: item.icon || (item.type === 'folder' ? 'üìÅ' : 'üìÑ'),
        color: item.color,
        hasChildren: item.type === 'folder',
        level: folder.level + 1,
        children: [],
        parentId: item.parentId
      }))

      // Update popup with loaded children
      const updatedPopup: OverlayPopup = {
        ...newPopup,
        children: formattedChildren,
        isLoading: false,
        folder: { ...folder, children: formattedChildren }
      }

      onCreateOverlayPopup(updatedPopup)
    } catch (error) {
      console.error('Error fetching overlay popup contents:', error)
      // Could add error handling callback here if needed
    }
  }

  // Close all folder popups
  const closeAllPopups = () => {
    setFolderPopups([])
  }

  // Handle button hover
  const handleButtonHover = (panel: PanelKey) => {
    if (panelHoverTimeoutRef.current) {
      clearTimeout(panelHoverTimeoutRef.current)
      panelHoverTimeoutRef.current = null
    }
    setActivePanel(panel)
  }

  // Handle button hover leave
  const handleButtonHoverLeave = () => {
    panelHoverTimeoutRef.current = setTimeout(() => {
      if (!isHoveringPanel) {
        setActivePanel(null)
      }
    }, 200)
  }

  // Handle panel hover
  const handlePanelHover = () => {
    if (panelHoverTimeoutRef.current) {
      clearTimeout(panelHoverTimeoutRef.current)
      panelHoverTimeoutRef.current = null
    }
    setIsHoveringPanel(true)
  }

  // Handle panel hover leave
  const handlePanelHoverLeave = () => {
    setIsHoveringPanel(false)
    panelHoverTimeoutRef.current = setTimeout(() => {
      setActivePanel(null)
    }, 200)
  }

  // Handle creating a new note using shared utility (same as notes-explorer)
  const handleCreateNewNote = async () => {
    if (isCreatingNote) return // Prevent double-clicks

    setIsCreatingNote(true)
    try {
      // Use shared note creator utility
      const result = await createNote()

      if (result.success && result.noteId) {
        // Open the newly created note
        onSelectNote?.(result.noteId)
        // Close the toolbar
        onClose()
      } else {
        throw new Error(result.error || 'Failed to create note')
      }
    } catch (error) {
      console.error('[FloatingToolbar] Failed to create note:', error)
      alert('Failed to create note. Please try again.')
    } finally {
      setIsCreatingNote(false)
    }
  }

  // Handle note preview hover
  const handleNotePreviewHover = async (noteId: string, event: React.MouseEvent) => {
    // Clear existing timeouts
    if (previewTimeoutRef.current) {
      clearTimeout(previewTimeoutRef.current)
    }
    if (previewCloseTimeoutRef.current) {
      clearTimeout(previewCloseTimeoutRef.current)
    }

    // Reset hover state
    isHoveringPreviewRef.current = false

    // Capture position immediately before async operation
    const rect = event.currentTarget.getBoundingClientRect()
    const position = {
      x: rect.right + 10,
      y: rect.top
    }

    // Set timeout to show preview after 500ms
    previewTimeoutRef.current = setTimeout(async () => {
      setIsLoadingPreview(true)
      try {
        const response = await fetch(`/api/items/${noteId}`)
        if (!response.ok) throw new Error('Failed to fetch note')

        const data = await response.json()
        const content = data?.item?.content
        const contentText = data?.item?.contentText

        // Extract preview text
        let previewText = ''
        if (contentText) {
          previewText = contentText.substring(0, 200)
        } else if (typeof content === 'string') {
          previewText = content.substring(0, 200)
        } else if (content?.type === 'doc') {
          // Extract text from ProseMirror JSON
          const extractText = (node: any): string => {
            if (node.text) return node.text
            if (node.content) {
              return node.content.map(extractText).join(' ')
            }
            return ''
          }
          previewText = extractText(content).substring(0, 200)
        }

        setNotePreview({
          noteId,
          content: previewText || 'No content yet',
          position
        })
      } catch (error) {
        console.error('[FloatingToolbar] Failed to fetch note preview:', error)
      } finally {
        setIsLoadingPreview(false)
      }
    }, 500)
  }

  // Handle note preview hover leave
  const handleNotePreviewHoverLeave = () => {
    if (previewTimeoutRef.current) {
      clearTimeout(previewTimeoutRef.current)
    }

    // Delay closing to allow moving mouse to preview tooltip
    previewCloseTimeoutRef.current = setTimeout(() => {
      if (!isHoveringPreviewRef.current) {
        setNotePreview(null)
      }
    }, 100)
  }

  // Handle preview tooltip hover
  const handlePreviewTooltipEnter = () => {
    isHoveringPreviewRef.current = true
    if (previewCloseTimeoutRef.current) {
      clearTimeout(previewCloseTimeoutRef.current)
    }
    // Also cancel panel close timeout to keep Organization panel open
    if (panelHoverTimeoutRef.current) {
      clearTimeout(panelHoverTimeoutRef.current)
      panelHoverTimeoutRef.current = null
    }
  }

  // Handle preview tooltip leave
  const handlePreviewTooltipLeave = () => {
    isHoveringPreviewRef.current = false
    setNotePreview(null)
    // Close the panel after leaving preview tooltip if not hovering panel
    if (!isHoveringPanel) {
      panelHoverTimeoutRef.current = setTimeout(() => {
        setActivePanel(null)
      }, 200)
    }
  }


  useEffect(() => {
    const handleClickAway = (event: MouseEvent) => {
      if (!containerRef.current?.contains(event.target as Node)) {
        onClose()
      }
    }

    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === "Escape") onClose()
    }

    document.addEventListener("mousedown", handleClickAway)
    document.addEventListener("keydown", handleEscape)
    return () => {
      document.removeEventListener("mousedown", handleClickAway)
      document.removeEventListener("keydown", handleEscape)
    }
  }, [onClose])

  const renderRecentNotes = () => (
    <div
      className="w-72 rounded-2xl border border-white/20 bg-gray-900 shadow-2xl"
      style={{ backgroundColor: 'rgba(17, 24, 39, 0.98)' }}
      onMouseEnter={handlePanelHover}
      onMouseLeave={handlePanelHoverLeave}
    >
      <div className="flex items-center justify-between px-4 py-3 border-b border-white/10 text-sm text-white/80">
        <span>Recent notes</span>
        <button className="text-white/60 hover:text-white" onClick={() => setActivePanel(null)} aria-label="Close panel">
          √ó
        </button>
      </div>
      <div className="max-h-64 overflow-y-auto p-3 space-y-2">
        {isLoadingRecent ? (
          <div className="text-center py-4 text-white/60 text-sm">Loading...</div>
        ) : recentNotes.length === 0 ? (
          <div className="text-center py-4 text-white/60 text-sm">No recent notes</div>
        ) : (
          recentNotes.map((item) => (
            <button
              key={item.id}
              className="group w-full rounded-xl bg-white/5 border border-white/10 px-3 py-2 text-left text-white/90 transition hover:bg-blue-500/20 hover:border-blue-400/40"
              onDoubleClick={() => {
                onSelectNote?.(item.id)
                onClose()
              }}
            >
              <div className="text-sm font-medium flex items-center justify-between gap-2">
                <span className="flex-1">{item.title}</span>
                <div
                  onMouseEnter={(e) => handleNotePreviewHover(item.id, e)}
                  onMouseLeave={handleNotePreviewHoverLeave}
                  onClick={(e) => {
                    e.stopPropagation()
                    onSelectNote?.(item.id)
                    onClose()
                  }}
                  className="opacity-0 group-hover:opacity-100 transition-opacity hover:bg-white/10 rounded p-0.5 cursor-pointer"
                  title="Hover to preview, click to open"
                >
                  <Eye className="w-3.5 h-3.5 text-blue-400" />
                </div>
              </div>
              <div className="mt-1 flex justify-between text-xs text-white/60">
                <span>{item.metaLeft}</span>
                <span>{item.metaRight}</span>
              </div>
            </button>
          ))
        )}
      </div>
    </div>
  )

  const renderOrg = () => {
    const flatItems = flattenTree(orgItems)

    return (
      <div
        className="w-72 rounded-2xl border border-white/20 bg-gray-900 shadow-2xl"
        style={{ backgroundColor: 'rgba(17, 24, 39, 0.98)' }}
        onMouseEnter={handlePanelHover}
        onMouseLeave={handlePanelHoverLeave}
      >
        <div className="flex items-center justify-between px-4 py-3 border-b border-white/10 text-sm text-white/80">
          <span>Organization</span>
          <button className="text-white/60 hover:text-white" onClick={() => setActivePanel(null)} aria-label="Close panel">
            √ó
          </button>
        </div>
        <div className="max-h-64 overflow-x-auto overflow-y-auto p-3 space-y-1">
          {isLoadingOrg ? (
            <div className="text-center py-4 text-white/60 text-sm">Loading...</div>
          ) : flatItems.length === 0 ? (
            <div className="text-center py-4 text-white/60 text-sm">No items</div>
          ) : (
            flatItems.map((item) => {
              const isExpanded = expandedFolders[item.id]
              const isFolder = item.type === 'folder'
              const hasChildren = item.hasChildren

              return (
                <div
                  key={item.id}
                  className="flex items-center gap-1"
                  style={{ paddingLeft: `${item.level * 16}px` }}
                >
                  {/* Chevron for folders */}
                  {isFolder && hasChildren ? (
                    <button
                      className="flex-shrink-0 w-5 h-5 flex items-center justify-center text-blue-400 hover:text-blue-300 transition font-bold"
                      onClick={(e) => {
                        e.stopPropagation()
                        toggleFolder(item.id)
                      }}
                    >
                      {isExpanded ? '‚ñº' : '‚ñ∂'}
                    </button>
                  ) : (
                    <div className="w-5 h-5 flex-shrink-0" />
                  )}

                  {/* Item button */}
                  <button
                    className="group flex-1 rounded-xl bg-white/5 border border-white/10 px-3 py-2 text-left text-white/90 transition hover:bg-blue-500/20 hover:border-blue-400/40"
                    onClick={() => {
                      if (isFolder) {
                        toggleFolder(item.id)
                      }
                      // Single click does nothing for notes (reserved for multi-select)
                    }}
                    onDoubleClick={() => {
                      if (!isFolder) {
                        onSelectNote?.(item.id)
                        onClose()
                      }
                    }}
                  >
                    <div className="text-sm font-medium flex items-center justify-between gap-2">
                      <div className="flex items-center gap-2">
                        <span>{item.icon}</span>
                        <span>{item.name}</span>
                      </div>
                      {/* Eye icon - different handlers for folders vs notes */}
                      {isFolder ? (
                        <div
                          onMouseEnter={(e) => handleEyeHover(item, e)}
                          onMouseLeave={() => handleEyeHoverLeave(item.id)}
                          onClick={(e) => handleEyeClick(item, e)}
                          className="opacity-0 group-hover:opacity-100 transition-opacity hover:bg-white/10 rounded p-0.5 cursor-pointer"
                          title="Hover to preview, click to pin"
                        >
                          <Eye className="w-3.5 h-3.5 text-white/40" />
                        </div>
                      ) : (
                        <div
                          onMouseEnter={(e) => handleNotePreviewHover(item.id, e)}
                          onMouseLeave={handleNotePreviewHoverLeave}
                          onClick={(e) => {
                            e.stopPropagation()
                            onSelectNote?.(item.id)
                            onClose()
                          }}
                          className="opacity-0 group-hover:opacity-100 transition-opacity hover:bg-white/10 rounded p-0.5 cursor-pointer"
                          title="Hover to preview, click to open"
                        >
                          <Eye className="w-3.5 h-3.5 text-blue-400" />
                        </div>
                      )}
                    </div>
                    <div className="mt-1 text-xs text-white/60">
                      {item.type === 'folder' ? 'Folder' : 'Note'}
                    </div>
                  </button>
                </div>
              )
            })
          )}
        </div>
      </div>
    )
  }

  const renderToolCategories = () => (
    <div
      className="flex items-center gap-2 rounded-2xl border border-white/20 bg-gray-900 px-4 py-3 shadow-xl"
      style={{ backgroundColor: 'rgba(17, 24, 39, 0.98)' }}
      onMouseEnter={handlePanelHover}
      onMouseLeave={handlePanelHoverLeave}
    >
      {TOOL_CATEGORIES.map((cat) => (
        <button
          key={cat.id}
          className="rounded-xl bg-white/10 px-4 py-2 text-sm text-white/80 transition hover:bg-blue-500/20 hover:border-blue-400/40"
          onClick={() => setActivePanel(cat.id)}
          onMouseEnter={() => handleButtonHover(cat.id)}
          onMouseLeave={handleButtonHoverLeave}
        >
          {cat.label}
        </button>
      ))}
    </div>
  )

  const renderLayerPanel = () => (
    <div
      className="w-72 rounded-2xl border border-white/20 bg-gray-900 shadow-2xl"
      style={{ backgroundColor: 'rgba(17, 24, 39, 0.98)' }}
      onMouseEnter={handlePanelHover}
      onMouseLeave={handlePanelHoverLeave}
    >
      <div className="flex items-center justify-between px-4 py-3 border-b border-white/10 text-sm text-white/80">
        <span>Layer</span>
        <button className="text-white/60 hover:text-white" onClick={() => setActivePanel(null)} aria-label="Close panel">√ó</button>
      </div>
      <div className="p-3 space-y-2">
        {LAYER_ACTIONS.map((item) => (
          <button key={item.label} className="w-full rounded-xl bg-white/5 border border-white/10 px-3 py-2 text-left text-white/90 transition hover:bg-blue-500/20 hover:border-blue-400/40" onClick={onClose}>
            <div className="text-sm font-medium">{item.label}</div>
            <div className="mt-1 text-xs text-white/60">{item.desc}</div>
          </button>
        ))}
      </div>
    </div>
  )

  const renderFormatPanel = () => (
    <div
      className="rounded-2xl border border-white/20 bg-gray-900 shadow-2xl"
      style={{ backgroundColor: 'rgba(17, 24, 39, 0.98)', minWidth: '280px' }}
      onMouseEnter={handlePanelHover}
      onMouseLeave={handlePanelHoverLeave}
    >
      <div className="flex items-center justify-between px-4 py-3 border-b border-white/10 text-sm text-white/80">
        <span>Format</span>
        <button className="text-white/60 hover:text-white" onClick={() => setActivePanel(null)} aria-label="Close panel">√ó</button>
      </div>
      <div style={{ padding: '12px', display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)', gap: '8px' }}>
        {FORMAT_ACTIONS.map((item) => (
          <button
            key={item.label}
            className={`rounded-lg text-sm transition hover:bg-blue-500/30 ${item.className ?? ""}`}
            style={{
              background: 'rgba(255, 255, 255, 0.1)',
              color: 'rgba(255, 255, 255, 0.8)',
              width: '42px',
              height: '42px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              border: 'none',
              cursor: 'pointer'
            }}
            title={item.tooltip}
            onClick={() => {
              if (item.command) {
                executeCommand(item.command, item.value)
              }
              setActivePanel(null)
              onClose()
            }}
          >
            {item.label}
          </button>
        ))}
      </div>
    </div>
  )

  const renderResizePanel = () => (
    <div
      className="w-72 rounded-2xl border border-white/20 bg-gray-900 shadow-2xl"
      style={{ backgroundColor: 'rgba(17, 24, 39, 0.98)' }}
      onMouseEnter={handlePanelHover}
      onMouseLeave={handlePanelHoverLeave}
    >
      <div className="flex items-center justify-between px-4 py-3 border-b border-white/10 text-sm text-white/80">
        <span>Resize</span>
        <button className="text-white/60 hover:text-white" onClick={() => setActivePanel(null)} aria-label="Close panel">√ó</button>
      </div>
      <div className="p-3 space-y-2">
        {RESIZE_ACTIONS.map((item) => (
          <button key={item.label} className="w-full rounded-xl bg-white/5 border border-white/10 px-3 py-2 text-left text-white/90 transition hover:bg-blue-500/20 hover:border-blue-400/40" onClick={onClose}>
            <div className="text-sm font-medium">{item.label}</div>
            <div className="mt-1 text-xs text-white/60">{item.desc}</div>
          </button>
        ))}
      </div>
    </div>
  )

  const renderBranchesPanel = () => {
    // Access global dataStore (made available by CanvasProvider)
    const dataStore = typeof window !== 'undefined' ? (window as any).canvasDataStore : null

    // Use activePanelId if available, otherwise default to 'main'
    const currentPanelId = activePanelId || 'main'

    console.log('[FloatingToolbar] renderBranchesPanel:', {
      activePanelId,
      currentPanelId,
      hasDataStore: !!dataStore,
      timestamp: Date.now()
    })

    if (dataStore && currentPanelId) {
      const currentBranchData = dataStore.get(currentPanelId)
      console.log('[FloatingToolbar] Current panel data:', {
        panelId: currentPanelId,
        hasBranchData: !!currentBranchData,
        branchesCount: currentBranchData?.branches?.length || 0,
        branches: currentBranchData?.branches
      })
    }

    if (!dataStore) {
      return (
        <div style={{
          width: '300px',
          borderRadius: '16px',
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          padding: '20px',
        }}>
          <div style={{ color: 'rgba(255,255,255,0.7)', textAlign: 'center', fontSize: '14px' }}>
            No canvas data available
          </div>
        </div>
      )
    }

    // Get the current branch data
    const currentBranch = dataStore.get(currentPanelId)

    if (!currentBranch) {
      return (
        <div style={{
          width: '300px',
          borderRadius: '16px',
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          padding: '20px',
        }}>
          <div style={{ color: 'rgba(255,255,255,0.7)', textAlign: 'center', fontSize: '14px' }}>
            No panel selected
          </div>
        </div>
      )
    }

    // Use BranchesSection component with props
    // Use key prop to force re-mount when panel changes
    return (
      <div
        style={{ maxWidth: '300px' }}
        onMouseEnter={handlePanelHover}
        onMouseLeave={handlePanelHoverLeave}
      >
        <BranchesSection
          key={currentPanelId}
          panelId={currentPanelId}
          branch={currentBranch}
          dataStore={dataStore}
        />
      </div>
    )
  }

  const renderActionsPanel = () => (
    <div
      className="rounded-2xl border border-white/20 shadow-2xl"
      style={{ backgroundColor: 'rgba(255, 255, 255, 0.98)', padding: '20px', minWidth: '280px' }}
      onMouseEnter={handlePanelHover}
      onMouseLeave={handlePanelHoverLeave}
    >
      <div className="flex items-center justify-between mb-4">
        <span className="text-gray-800 font-semibold text-lg">Create Branch</span>
        <button
          className="text-gray-500 hover:text-gray-700 text-xl leading-none"
          onClick={() => setActivePanel(null)}
          aria-label="Close panel"
        >
          √ó
        </button>
      </div>
      <div style={{ display: 'flex', gap: '12px' }}>
        {/* Note Button */}
        <button
          onClick={() => {
            insertAnnotation('note')
            setActivePanel(null)
            onClose()
          }}
          style={{
            flex: 1,
            background: 'linear-gradient(135deg, #3498db 0%, #2980b9 100%)',
            color: 'white',
            border: 'none',
            borderRadius: '12px',
            padding: '20px 16px',
            cursor: 'pointer',
            fontSize: '16px',
            fontWeight: 600,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            gap: '8px',
            transition: 'transform 0.2s ease, box-shadow 0.2s ease',
            boxShadow: '0 4px 12px rgba(52, 152, 219, 0.3)'
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.transform = 'translateY(-2px)'
            e.currentTarget.style.boxShadow = '0 6px 16px rgba(52, 152, 219, 0.4)'
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.transform = 'translateY(0)'
            e.currentTarget.style.boxShadow = '0 4px 12px rgba(52, 152, 219, 0.3)'
          }}
        >
          <span style={{ fontSize: '32px' }}>üìù</span>
          <span>Note</span>
        </button>

        {/* Explore Button */}
        <button
          onClick={() => {
            insertAnnotation('explore')
            setActivePanel(null)
            onClose()
          }}
          style={{
            flex: 1,
            background: 'linear-gradient(135deg, #f39c12 0%, #e67e22 100%)',
            color: 'white',
            border: 'none',
            borderRadius: '12px',
            padding: '20px 16px',
            cursor: 'pointer',
            fontSize: '16px',
            fontWeight: 600,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            gap: '8px',
            transition: 'transform 0.2s ease, box-shadow 0.2s ease',
            boxShadow: '0 4px 12px rgba(243, 156, 18, 0.3)'
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.transform = 'translateY(-2px)'
            e.currentTarget.style.boxShadow = '0 6px 16px rgba(243, 156, 18, 0.4)'
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.transform = 'translateY(0)'
            e.currentTarget.style.boxShadow = '0 4px 12px rgba(243, 156, 18, 0.3)'
          }}
        >
          <span style={{ fontSize: '32px' }}>üîç</span>
          <span>Explore</span>
        </button>

        {/* Promote Button */}
        <button
          onClick={() => {
            insertAnnotation('promote')
            setActivePanel(null)
            onClose()
          }}
          style={{
            flex: 1,
            background: 'linear-gradient(135deg, #27ae60 0%, #229954 100%)',
            color: 'white',
            border: 'none',
            borderRadius: '12px',
            padding: '20px 16px',
            cursor: 'pointer',
            fontSize: '16px',
            fontWeight: 600,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            gap: '8px',
            transition: 'transform 0.2s ease, box-shadow 0.2s ease',
            boxShadow: '0 4px 12px rgba(39, 174, 96, 0.3)'
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.transform = 'translateY(-2px)'
            e.currentTarget.style.boxShadow = '0 6px 16px rgba(39, 174, 96, 0.4)'
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.transform = 'translateY(0)'
            e.currentTarget.style.boxShadow = '0 4px 12px rgba(39, 174, 96, 0.3)'
          }}
        >
          <span style={{ fontSize: '32px' }}>‚≠ê</span>
          <span>Promote</span>
        </button>
      </div>
    </div>
  )

  return (
    <div
      ref={containerRef}
      className="absolute z-[9999] flex flex-col items-center gap-2"
      style={{ left: position.left, top: position.top }}
      onContextMenu={(event) => event.preventDefault()}
      onMouseDown={(e) => {
        // Prevent default to preserve editor focus and text selection
        e.preventDefault()
      }}
    >
      <div className="flex items-center gap-3 rounded-full border border-white/20 bg-gray-900 px-4 py-3 shadow-2xl" style={{ backgroundColor: 'rgba(17, 24, 39, 0.98)' }}>
        <div className="flex h-8 w-8 items-center justify-center rounded-full border border-white/10 bg-white/10 text-white/60 select-none">
          ‚ãÆ
        </div>
        <button
          className="rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 px-4 py-2 text-sm font-semibold text-white shadow-lg hover:from-blue-400 hover:to-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
          onClick={handleCreateNewNote}
          disabled={isCreatingNote}
        >
          {isCreatingNote ? 'Creating...' : '+ Note'}
        </button>
        <div className="flex items-center gap-2" onMouseLeave={handleButtonHoverLeave}>
          <button
            className={`rounded-full border border-white/10 px-3 py-2 text-sm text-white/80 transition hover:bg-white/15 ${activePanel === "recents" ? "bg-white/15" : ""}`}
            onClick={() => setActivePanel((prev) => (prev === "recents" ? null : "recents"))}
            onMouseEnter={() => handleButtonHover("recents")}
          >
            Recents ‚ñæ
          </button>
          <button
            className={`rounded-full border border-white/10 px-3 py-2 text-sm text-white/80 transition hover:bg-white/15 ${activePanel === "org" ? "bg-white/15" : ""}`}
            onClick={() => setActivePanel((prev) => (prev === "org" ? null : "org"))}
            onMouseEnter={() => handleButtonHover("org")}
          >
            Org ‚ñæ
          </button>
          <button
            className={`rounded-full border border-white/10 px-3 py-2 text-sm text-white/80 transition hover:bg-white/15 ${activePanel === "tools" ? "bg-white/15" : ""}`}
            onClick={() => setActivePanel((prev) => (prev === "tools" ? null : "tools"))}
            onMouseEnter={() => handleButtonHover("tools")}
          >
            Tools ‚ñæ
          </button>
        </div>
      </div>
      {activePanel === "recents" && renderRecentNotes()}
      {activePanel === "org" && renderOrg()}
      {(activePanel === "tools" || activePanel === "layer" || activePanel === "format" || activePanel === "resize" || activePanel === "branches" || activePanel === "actions") && renderToolCategories()}
      {activePanel === "layer" && renderLayerPanel()}
      {activePanel === "format" && renderFormatPanel()}
      {activePanel === "resize" && renderResizePanel()}
      {activePanel === "branches" && renderBranchesPanel()}
      {activePanel === "actions" && renderActionsPanel()}
      <div className="rounded-full bg-gray-800/90 px-3 py-1 text-xs text-white/60 shadow-lg border border-white/10">
        Press <kbd className="mx-1 px-1.5 py-0.5 rounded bg-white/10 text-white/80 font-mono text-[10px]">
          {typeof window !== 'undefined' && /Mac|iPhone|iPod|iPad/i.test(navigator.platform) ? '‚åòK' : 'Ctrl+K'}
        </kbd> to open ‚Ä¢ <kbd className="mx-1 px-1.5 py-0.5 rounded bg-white/10 text-white/80 font-mono text-[10px]">Esc</kbd> to close
      </div>

      {/* Hover tooltip popups - simple fixed divs */}
      {folderPopups.map((popup) => (
        <div
          key={popup.id}
          className="fixed w-72 rounded-2xl border border-white/20 bg-gray-900 shadow-2xl"
          style={{
            backgroundColor: 'rgba(17, 24, 39, 0.98)',
            left: `${popup.position.x}px`,
            top: `${popup.position.y}px`,
            zIndex: 10000
          }}
          onClick={(e) => e.stopPropagation()}
          onMouseEnter={() => handlePopupHover(popup.folderId)}
          onMouseLeave={() => handleEyeHoverLeave(popup.folderId)}
        >
          {/* Header */}
          <div className="flex items-center justify-between px-4 py-3 border-b border-white/10 text-sm text-white/80">
            <span>{popup.folderName}</span>
            <button
              className="text-white/60 hover:text-white"
              onClick={() => setFolderPopups(prev => prev.filter(p => p.id !== popup.id))}
              aria-label="Close popup"
            >
              √ó
            </button>
          </div>

          {/* Content */}
          <div className="max-h-64 overflow-y-auto p-3 space-y-1">
            {popup.isLoading ? (
              <div className="text-center py-4 text-white/60 text-sm">Loading...</div>
            ) : popup.children.length === 0 ? (
              <div className="text-center py-4 text-white/60 text-sm">Empty folder</div>
            ) : (
              popup.children.map((child) => (
                <button
                  key={child.id}
                  className="w-full rounded-xl bg-white/5 border border-white/10 px-3 py-2 text-left text-white/90 transition hover:bg-blue-500/20 hover:border-blue-400/40"
                  onClick={() => {
                    if (child.type === 'note') {
                      onSelectNote?.(child.id)
                      onClose()
                      closeAllPopups()
                    }
                  }}
                >
                  <div className="text-sm font-medium flex items-center gap-2">
                    <span>{child.icon}</span>
                    <span>{child.name}</span>
                  </div>
                  <div className="mt-1 text-xs text-white/60">
                    {child.type === 'folder' ? 'Folder' : 'Note'}
                  </div>
                </button>
              ))
            )}
          </div>
        </div>
      ))}

      {/* Note preview tooltip */}
      {notePreview && (
        <div
          className="fixed px-4 py-3 rounded-xl border border-blue-500/30 bg-gray-900 shadow-2xl max-w-sm"
          style={{
            backgroundColor: 'rgba(17, 24, 39, 0.98)',
            left: `${notePreview.position.x}px`,
            top: `${notePreview.position.y}px`,
            zIndex: 10000
          }}
          onMouseEnter={handlePreviewTooltipEnter}
          onMouseLeave={handlePreviewTooltipLeave}
        >
          <div className="text-xs text-blue-400 font-semibold mb-1">Preview</div>
          <div className="text-sm text-white/90 line-clamp-6">
            {isLoadingPreview ? 'Loading...' : notePreview.content}
          </div>
        </div>
      )}
    </div>
  )
}
