"use client"

import { useState, useRef, useEffect } from "react"
import type { TiptapEditorPlainHandle } from "./tiptap-editor-plain"
import type { TiptapEditorHandle } from "./tiptap-editor-collab"

type UnifiedEditorHandle = TiptapEditorHandle | TiptapEditorPlainHandle

interface FormatToolbarProps {
  editorRef: React.RefObject<UnifiedEditorHandle | null>
  panelId: string
}

export function FormatToolbar({ editorRef, panelId }: FormatToolbarProps) {
  const [isVisible, setIsVisible] = useState(false)
  const timeoutRef = useRef<NodeJS.Timeout>()

  const executeCommand = (command: string, value?: any) => {
    if (!editorRef.current) return
    editorRef.current.executeCommand(command, value)
  }

  const handleMouseEnter = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current)
    }
    setIsVisible(true)
  }

  const handleMouseLeave = () => {
    timeoutRef.current = setTimeout(() => {
      setIsVisible(false)
    }, 300)
  }

  useEffect(() => {
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current)
      }
    }
  }, [])

  const formatOptions = [
    { label: "B", command: "bold", title: "Bold", style: { fontWeight: "bold" } },
    { label: "/", command: null, title: "", isSeparator: true },
    { label: "U", command: "underline", title: "Underline", style: { textDecoration: "underline" } },
    { label: "H2", command: "heading", value: 2, title: "Heading 2", style: { fontWeight: "600", fontSize: "12px" } },
    { label: "H3", command: "heading", value: 3, title: "Heading 3", style: { fontWeight: "600", fontSize: "12px" } },
    { label: "‚Ä¢", command: "bulletList", title: "Bullet List", style: { fontSize: "16px" } },
    { label: "1.", command: "orderedList", title: "Numbered List", style: { fontSize: "12px" } },
    { label: '"', command: "blockquote", title: "Quote", style: { fontSize: "16px", fontWeight: "500" } },
    { label: "üñç", command: "highlight", title: "Highlight" },
    { label: "√ó", command: "removeFormat", title: "Clear Format", style: { fontSize: "16px", color: "#e74c3c" } },
  ]

  return (
    <div 
      className="format-toolbar-container" 
      style={{ position: "relative", display: "inline-block" }}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      <button
        className="format-toolbar-trigger"
        onClick={() => setIsVisible(!isVisible)}
        title="Text Formatting"
        style={{
          background: "rgba(255,255,255,0.2)",
          border: "none",
          borderRadius: "4px",
          padding: "4px 8px",
          cursor: "pointer",
          fontSize: "11px",
          color: "white",
          transition: "all 0.2s ease",
          display: "flex",
          alignItems: "center",
          gap: "4px",
          height: "24px",
        }}
        onMouseOver={(e) => {
          e.currentTarget.style.background = "rgba(255,255,255,0.3)"
        }}
        onMouseOut={(e) => {
          e.currentTarget.style.background = "rgba(255,255,255,0.2)"
        }}
      >
        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
          <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" />
          <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z" />
        </svg>
        <span>Format</span>
      </button>

      {isVisible && (
        <div
          className="format-toolbar-dropdown"
          onMouseEnter={handleMouseEnter}
          onMouseLeave={handleMouseLeave}
          style={{
            position: "absolute",
            top: "calc(100% + 4px)",
            right: "0",
            background: "#f8f9fa",
            border: "1px solid #dee2e6",
            borderRadius: "8px",
            padding: "8px",
            boxShadow: "0 4px 12px rgba(0,0,0,0.15)",
            zIndex: 1000,
            display: "grid",
            gridTemplateColumns: "repeat(5, 1fr)",
            gridTemplateRows: "repeat(2, 1fr)",
            gap: "4px",
            minWidth: "220px",
          }}
        >
          {formatOptions.map((option, index) => {
            // Render separator
            if (option.isSeparator) {
              return (
                <div
                  key={index}
                  style={{
                    width: "40px",
                    height: "40px",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    color: "#ccc",
                    pointerEvents: "none",
                  }}
                >
                  {option.label}
                </div>
              )
            }
            
            // Render button
            return (
              <button
                key={index}
                onClick={() => {
                  executeCommand(option.command!, option.value)
                  setIsVisible(false)
                }}
                title={option.title}
                style={{
                  background: "white",
                  border: "1px solid #dee2e6",
                  borderRadius: "6px",
                  width: "40px",
                  height: "40px",
                  cursor: "pointer",
                  transition: "all 0.2s ease",
                  fontSize: "14px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  ...option.style,
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.background = "#667eea"
                  e.currentTarget.style.color = "white"
                  e.currentTarget.style.transform = "translateY(-1px)"
                  e.currentTarget.style.borderColor = "#667eea"
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.background = "white"
                  e.currentTarget.style.color = option.style?.color || "inherit"
                  e.currentTarget.style.transform = "translateY(0)"
                  e.currentTarget.style.borderColor = "#dee2e6"
                }}
              >
                {option.label}
              </button>
            )
          })}
        </div>
      )}
    </div>
  )
}